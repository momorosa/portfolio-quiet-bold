/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 src/assets/models/Dragon_Evolved.gltf -o src/components/DragonEvoloved.jsx -r src 
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import dragonUrl from '../assets/models/Dragon_Evolved.gltf?url'


export function DragonEvolved({hovered, ...props}) {
    const group = React.useRef()
    const { scene, animations } = useGLTF(dragonUrl)
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
    const { nodes, materials } = useGraph(clone)
    const { actions } = useAnimations(animations, group)

    useEffect(() => {
        if(!actions) return
  
        const anim = hovered ? "Headbutt" : "Flying_Idle"
        const act = actions[anim]
  
        if(!act) return
          
        act.reset().fadeIn(0.5).play()
        return () => act?.fadeOut?.(0.5)
    }, [hovered, actions])

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group name="CharacterArmature">
                    <primitive object={nodes.Root} />
                    <skinnedMesh name="Dragon" geometry={nodes.Dragon.geometry} material={materials.Atlas} skeleton={nodes.Dragon.skeleton} />
                </group>
            </group>
        </group>
    )
}

useGLTF.preload(dragonUrl)
